@model dynamic
@{
    ViewData["Title"] = "Dashboard - Kasa Paneli";
}

<div class="container-fluid">
    <!-- Dashboard Başlık -->
    <div class="row mb-4">
        <div class="col-12">
            <h2 class="fw-bold text-dark">
                <i class="fas fa-tachometer-alt me-2"></i>Dashboard
                <small class="text-muted fs-6">@DateTime.Now.ToString("dd MMMM yyyy, HH:mm")</small>
            </h2>
        </div>
    </div>

    <!-- Dashboard Kartları -->
    <div class="row g-3 mb-4">
        <!-- Günlük Ciro -->
        <div class="col-xl-3 col-md-6">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="text-muted fw-normal mb-1">Günlük Ciro</h6>
                            <h3 class="mb-0 fw-bold text-success">₺@Model.DailySales.ToString("N2")</h3>
                        </div>
                        <div class="text-success">
                            <i class="fas fa-lira-sign fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- QR Görüntülenme -->
        <div class="col-xl-3 col-md-6">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="text-muted fw-normal mb-1">QR Menü Görüntülenme</h6>
                            <h3 class="mb-0 fw-bold text-info">@Model.QrViewCount</h3>
                        </div>
                        <div class="text-info">
                            <i class="fas fa-qrcode fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Aktif Masalar -->
        <div class="col-xl-3 col-md-6">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="text-muted fw-normal mb-1">Dolu Masalar</h6>
                            <h3 class="mb-0 fw-bold text-warning">@Model.ActiveTableCount</h3>
                        </div>
                        <div class="text-warning">
                            <i class="fas fa-chair fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Günlük Sipariş -->
        <div class="col-xl-3 col-md-6">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h6 class="text-muted fw-normal mb-1">Günlük Sipariş</h6>
                            <h3 class="mb-0 fw-bold text-primary">@Model.DailyOrderCount</h3>
                        </div>
                        <div class="text-primary">
                            <i class="fas fa-shopping-cart fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Masa Durumları -->
    <div class="row">
        <div class="col-12">
            <div class="card border-0 shadow-sm">
                <div class="card-header bg-white py-3">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-table me-2"></i>Masa Durumları
                    </h5>
                </div>
                <div class="card-body">
                    <div id="tablesContainer">
                        <!-- Masalar burada gösterilecek -->
                        <div class="text-center py-5">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Yükleniyor...</span>
                            </div>
                            <p class="mt-2">Masalar yükleniyor...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Ürün Seçim Modal'ı -->
<div class="modal fade" id="productSelectionModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header border-0 pb-0">
                <div class="d-flex align-items-center">
                    <i class="fas fa-utensils me-3 text-primary fa-lg"></i>
                    <div>
                        <h4 class="modal-title mb-0" id="productModalTableName">Masa X - Sipariş Al</h4>
                        <small class="text-muted">Ürün seçip sepete ekleyin</small>
                    </div>
                </div>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>

            <div class="modal-body p-0">
                <div class="row g-0">
                    <!-- Sol Taraf - Ürün Seçimi -->
                    <div class="col-8">
                        <div class="p-4">
                            <!-- Kategori Tabs -->
                            <ul class="nav nav-pills mb-4" id="productCategoryTabs" role="tablist">
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link active" id="all-tab" data-bs-toggle="pill"
                                            data-bs-target="#all-products" type="button" role="tab">
                                        <i class="fas fa-th-large me-2"></i>Tümü
                                    </button>
                                </li>
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link" id="bar-tab" data-bs-toggle="pill"
                                            data-bs-target="#bar-products" type="button" role="tab">
                                        <i class="fas fa-cocktail me-2"></i>Bar
                                    </button>
                                </li>
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link" id="kitchen-tab" data-bs-toggle="pill"
                                            data-bs-target="#kitchen-products" type="button" role="tab">
                                        <i class="fas fa-kitchen-set me-2"></i>Mutfak
                                    </button>
                                </li>
                            </ul>

                            <!-- Arama Çubuğu -->
                            <div class="input-group mb-4">
                                <span class="input-group-text bg-light border-end-0">
                                    <i class="fas fa-search text-muted"></i>
                                </span>
                                <input type="text" class="form-control border-start-0"
                                       id="productSearch" placeholder="Ürün ara...">
                            </div>

                            <!-- Ürün Listesi -->
                            <div class="tab-content" id="productTabContent">
                                <div class="tab-pane fade show active" id="all-products">
                                    <div id="allProductsGrid" class="row g-3">
                                        <div class="col-12 text-center py-5">
                                            <div class="spinner-border text-primary" role="status"></div>
                                            <p class="mt-2 text-muted">Ürünler yükleniyor...</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="tab-pane fade" id="bar-products">
                                    <div id="barProductsGrid" class="row g-3">
                                        <!-- Bar ürünleri -->
                                    </div>
                                </div>
                                <div class="tab-pane fade" id="kitchen-products">
                                    <div id="kitchenProductsGrid" class="row g-3">
                                        <!-- Mutfak ürünleri -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Sağ Taraf - Sepet -->
                    <div class="col-4 border-start bg-light">
                        <div class="p-4">
                            <div class="d-flex align-items-center mb-3">
                                <i class="fas fa-shopping-cart me-2 text-success"></i>
                                <h5 class="mb-0">Sepet</h5>
                                <span class="badge bg-primary ms-auto" id="cartItemCount">0</span>
                            </div>

                            <!-- Sepet İçeriği -->
                            <div id="cartItems" class="mb-4" style="max-height: 400px; overflow-y: auto;">
                                <div class="text-center py-5 text-muted" id="emptyCartMessage">
                                    <i class="fas fa-shopping-cart fa-3x mb-3 opacity-25"></i>
                                    <p class="mb-0">Sepet boş</p>
                                    <small>Ürün seçerek sepete ekleyin</small>
                                </div>
                            </div>

                            <!-- Sepet Özeti -->
                            <div class="border-top pt-3" id="cartSummary" style="display: none;">
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Toplam:</span>
                                    <strong id="cartTotal">₺0.00</strong>
                                </div>

                                <!-- Garson Notu -->
                                <div class="mb-3">
                                    <label class="form-label small">Not (opsiyonel):</label>
                                    <textarea class="form-control form-control-sm"
                                              id="waiterNote" rows="2"
                                              placeholder="Özel talimat..."></textarea>
                                </div>

                                <!-- Sipariş Gönder -->
                                <button class="btn btn-success w-100 btn-lg" id="submitOrderBtn">
                                    <i class="fas fa-paper-plane me-2"></i>
                                    Sipariş Gönder
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        $(document).ready(function() {
            loadTables(); // İlk yükleme

            // Her dakika sadece zamanları güncelle
            setInterval(updateTableTimes, 60000); // 1 dakika

            // Event delegation ile masa tıklama - DOM'da değişiklik olsa da çalışır
            $(document).on('click', '.table-card', function() {
                const tableId = $(this).data('table-id');
                const tableName = $(this).find('.card-title').text();
                const isOccupied = $(this).hasClass('border-warning');

                openTableModal(tableId, tableName, isOccupied);
            });
        });

        let currentTablesData = {}; // Global olarak tutalım

        function loadTables() {
            $.ajax({
                url: '/Home/GetTables',
                method: 'GET',
                success: function(response) {
                    if (response.success) {
                        currentTablesData = response.data; // Veriyi sakla
                        renderTables(response.data);
                    } else {
                        console.error('Masa yükleme hatası:', response.message);
                        ToastHelper.error('Masalar yüklenemedi!');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('AJAX Hatası:', error);
                    ToastHelper.error('Bağlantı hatası!');
                }
            });
        }

        // Sadece zamanları güncelle - tab pozisyonu korunsun
        function updateTableTimes() {
            // Sadece dolu masaların zamanlarını güncelle
            $('.table-card[data-opened-at]').each(function() {
                const openedAt = $(this).data('opened-at');
                if (openedAt) {
                    const timeDisplay = $(this).find('.time-display');
                    if (timeDisplay.length > 0) {
                        timeDisplay.text(getTimeAgo(openedAt));
                    }
                }
            });

            // Son güncelleme zamanını güncelle
            $('#lastUpdateTime').text(new Date().toLocaleTimeString('tr-TR', {
                hour: '2-digit',
                minute: '2-digit'
            }));
        }

        // Tab pozisyonunu koruyarak render
        function renderTables(tablesData) {
            // Şu anki aktif tab'ı kaydet
            const activeTabId = $('.nav-tabs .nav-link.active').attr('id');

            let html = '';

            if (Object.keys(tablesData).length === 0) {
                html = `
                    <div class="text-center py-5">
                        <i class="fas fa-chair fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">Henüz masa tanımlanmamış</h5>
                        <p class="text-muted">Masa eklemek için masa yönetimi sayfasını kullanabilirsiniz.</p>
                    </div>
                `;
            } else {
                // İstatistikler
                let totalTables = 0;
                let occupiedTables = 0;

                Object.values(tablesData).forEach(tables => {
                    totalTables += tables.length;
                    occupiedTables += tables.filter(t => t.isOccupied).length;
                });

                const occupancyRate = totalTables > 0 ? Math.round((occupiedTables / totalTables) * 100) : 0;
                const freeTableCount = totalTables - occupiedTables;

                // Üst bilgi çubuğu
                html += `
                    <div class="row mb-3">
                        <div class="col-md-8">
                            <div class="d-flex align-items-center">
                                <div class="me-4">

                                </div>
                                <div class="me-4">
                                    <small class="text-muted">
                                        <i class="fas fa-chair me-1 text-warning"></i>
                                        <span class="text-warning fw-bold">${occupiedTables}</span> Dolu
                                    </small>
                                </div>
                                <div>
                                    <small class="text-muted">
                                        <i class="fas fa-chair me-1 text-success"></i>
                                        <span class="text-success fw-bold">${freeTableCount}</span> Boş
                                    </small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 text-end">
                               <span class="badge bg-light text-dark fs-6 px-3 py-2">
                                        <i class="fas fa-chart-pie me-2 text-primary"></i>
                                        Doluluk: <strong class="text-primary">${occupancyRate}%</strong>
                                    </span>
                        </div>
                    </div>
                `;

                // Tab Navigation
                const categories = Object.keys(tablesData);

                html += '<ul class="nav nav-tabs mb-4" id="categoryTabs" role="tablist">';
                categories.forEach((category, index) => {
                    const categoryId = category.replace(/\s+/g, '').toLowerCase();
                    // Aktif tab'ı koru, yoksa ilkini aktif yap
                    const isActive = (activeTabId && activeTabId === `${categoryId}-tab`) || (!activeTabId && index === 0) ? 'active' : '';
                    const tables = tablesData[category];
                    const categoryOccupied = tables.filter(t => t.isOccupied).length;

                    html += `
                        <li class="nav-item" role="presentation">
                            <button class="nav-link ${isActive} d-flex align-items-center"
                                    id="${categoryId}-tab"
                                    data-bs-toggle="tab"
                                    data-bs-target="#${categoryId}"
                                    type="button"
                                    role="tab">
                                <i class="fas fa-map-marker-alt me-2"></i>
                                ${category}
                                <span class="badge bg-secondary ms-2">${tables.length}</span>
                                ${categoryOccupied > 0 ? `<span class="badge bg-warning ms-1">${categoryOccupied}</span>` : ''}
                            </button>
                        </li>
                    `;
                });
                html += '</ul>';

                // Tab Content
                html += '<div class="tab-content" id="categoryTabContent">';
                categories.forEach((category, index) => {
                    const categoryId = category.replace(/\s+/g, '').toLowerCase();
                    // Aktif content'i koru
                    const isActive = (activeTabId && activeTabId === `${categoryId}-tab`) || (!activeTabId && index === 0) ? 'show active' : '';
                    const tables = tablesData[category];

                    html += `
                        <div class="tab-pane fade ${isActive}"
                             id="${categoryId}"
                             role="tabpanel"
                             aria-labelledby="${categoryId}-tab">
                            <div class="row g-3">
                    `;

                    tables.forEach(table => {
                        const isOccupied = table.isOccupied;
                        const cardClass = isOccupied ? 'border-warning bg-warning bg-opacity-10' : 'border-success bg-success bg-opacity-10';
                        const iconClass = isOccupied ? 'text-warning' : 'text-success';
                        const statusIcon = isOccupied ? 'fas fa-clock' : 'fas fa-check-circle';

                        html += `
                            <div class="col-xl-2 col-lg-3 col-md-4 col-6">
                                <div class="card ${cardClass} table-card h-100"
                                     style="cursor: pointer;"
                                     data-table-id="${table.id}"
                                     data-opened-at="${table.openedAt || ''}">
                                    <div class="card-body text-center p-3">
                                        <div class="${iconClass} mb-2">
                                            <i class="fas fa-chair fa-2x"></i>
                                        </div>
                                        <h6 class="card-title mb-1">${table.name}</h6>
                                        <div class="small ${iconClass}">
                                            <i class="${statusIcon} me-1"></i>
                                            ${isOccupied ? 'Dolu' : 'Boş'}
                                        </div>
                                                       ${isOccupied ? `
                                            <div class="mt-2 pt-2 border-top">
                                                <div class="small text-muted time-display">
                                                    ${getTimeAgo(table.openedAt)}
                                                </div>
                                                <div class="fw-bold text-warning">
                                                    ₺${(table.totalAmount || 0).toFixed(2)}
                                                </div>
                                            </div>
                                        ` : ''}
                                    </div>
                                </div>
                            </div>
                        `;
                    });

                    html += `
                            </div>
                        </div>
                    `;
                });
                html += '</div>';
            }

            $('#tablesContainer').html(html);
        }

        // Modal açma fonksiyonu
        function openTableModal(tableId, tableName, isOccupied) {
            // Modal başlığını ayarla
            $('#modalTableName').text(tableName);

            const statusBadge = $('#modalTableStatus');
            if (isOccupied) {
                statusBadge.text('Dolu').removeClass('bg-success').addClass('bg-warning');
            } else {
                statusBadge.text('Boş').removeClass('bg-warning').addClass('bg-success');
            }

            // Modal'ı aç
            const modal = new bootstrap.Modal(document.getElementById('tableModal'));
            modal.show();

            // Loader göster
        // Tab'ları bozmadan sadece içeriklerini loading yap
        $('#ordersTab').html('<div class="text-center py-4"><div class="spinner-border"></div><p class="mt-2">Yükleniyor...</p></div>');
        $('#paymentsTab').html('<div class="text-center py-4"><div class="spinner-border"></div><p class="mt-2">Yükleniyor...</p></div>');
        $('#summaryTab').html('<div class="text-center py-4"><div class="spinner-border"></div><p class="mt-2">Yükleniyor...</p></div>');

            // Masa detaylarını getir
            loadTableDetails(tableId);
        }

        function loadTableDetails(tableId) {
            $.ajax({
                url: '/Home/GetTableDetails',
                method: 'GET',
                data: { tableId: tableId },
                success: function(response) {

                       console.log('🔍 Response:', response);
            console.log('🔍 Orders:', response.data?.orders);
            console.log('🔍 Total Amount:', response.data?.totalOrderAmount);

                    if (response.success) {
                        const data = response.data;
                        const table = data.table;
                        const orders = data.orders || [];
                        const payments = data.payments || [];

                        if (!table.isOccupied) {
                            // Boş masa
                            $('#ordersTab').html(`
                                <div class="text-center py-4">
                                    <i class="fas fa-utensils fa-4x text-primary mb-3"></i>
                                    <h5 class="text-muted mb-3">Masa Boş</h5>
                                    <p class="text-muted mb-4">Bu masaya sipariş almak için ürün seçim ekranını açın.</p>
                                    <button class="btn btn-primary btn-lg" onclick="startNewOrder('${table.id}')">
                                        <i class="fas fa-plus me-2"></i>Sipariş Al
                                    </button>
                                </div>
                            `);
                        } else {
                            // Dolu masa - gerçek sipariş detaylarını göster
                                    // Tüm gerekli parametreleri gönder
        const ordersHtml = generateOccupiedTableHTML(table, orders, data.totalOrderAmount || 0, data.totalPaidAmount || 0, data.remainingAmount || 0);
                            $('#ordersTab').html(ordersHtml);
                        }

                        // Diğer tab'lar
                        $('#paymentsTab').html(generatePaymentsTabContent(payments, table.id));
                        $('#summaryTab').html(generateSummaryTabContent(data.totalOrderAmount || 0, data.totalPaidAmount || 0, data.remainingAmount || 0));

                        $('#orderCount').text(orders.length);
                        $('#paymentCount').text(payments.length);

                    } else {
                        $('#ordersTab').html(`<div class="alert alert-danger">${response.message}</div>`);
                    }
                },
                error: function() {
                    $('#ordersTab').html('<div class="alert alert-danger">Bağlantı hatası!</div>');
                }
            });
        }

        // Zaman farkı hesaplama
        function getTimeAgo(dateString) {
            if (!dateString || dateString === 'undefined' || dateString === 'null') {
                return 'Yeni açıldı';
            }

            try {
                const now = new Date();
                const openedAt = new Date(dateString);

                // Geçersiz tarih kontrolü
                if (isNaN(openedAt.getTime())) {
                    return 'Az önce';
                }

                const diffMs = now - openedAt;

                // Negatif değer kontrolü (gelecek tarih)
                if (diffMs < 0) {
                    return 'Az önce';
                }

                const diffMins = Math.floor(diffMs / 60000);
                const diffHours = Math.floor(diffMins / 60);

                if (diffMins < 1) return 'Az önce';
                if (diffMins < 60) return `${diffMins} dk`;
                if (diffHours < 24) return `${diffHours} sa ${diffMins % 60} dk`;

                const diffDays = Math.floor(diffHours / 24);
                return `${diffDays} gün`;

            } catch (error) {
                console.error('Tarih hesaplama hatası:', error, dateString);
                return 'Az önce';
            }
        }

        // Placeholder yerine gerçek hesap açma
        function openTableAccount(tableId) {
            // Confirmation dialog
            if (!confirm('Bu masaya yeni hesap açmak istediğinizden emin misiniz?')) {
                return;
            }

            LoaderHelper.show('Hesap açılıyor...');

            $.ajax({
                url: '/Home/OpenTableAccount',
                method: 'POST',
                data: { tableId: tableId },
                success: function(response) {
                    LoaderHelper.hide();

                    if (response.success) {
                        ToastHelper.success(response.message);

                        // Modal'ı kapat
                        $('#tableModal').modal('hide');

                        // Masa listesini güncelle
                        loadTables();

                        // 1 saniye sonra yeni açılan hesap modal'ını aç
                        setTimeout(() => {
                            // Masayı tekrar aç (artık dolu olarak görünecek)
                            const tableName = $('#modalTableName').text();
                            openTableModal(tableId, tableName, true);
                        }, 1000);

                    } else {
                        ToastHelper.error(response.message);
                    }
                },
                error: function() {
                    LoaderHelper.hide();
                    ToastHelper.error('Bağlantı hatası! Lütfen tekrar deneyin.');
                }
            });
        }

        // Dolu masa HTML'ini oluşturan fonksiyon
        function generateOccupiedTableHTML(table, orders, totalAmount, totalPaidAmount, remainingAmount) {
            
                   // ✅ ÖNCE ETİKET BİLGİLERİNİ HESAPLA
        const hasLabels = orders.some(o => o.shorLabel && o.shorLabel.trim() !== '');
        const uniqueLabels = [...new Set(orders.filter(o => o.shorLabel && o.shorLabel.trim() !== '').map(o => o.shorLabel))];
        const labelAmounts = {};
        uniqueLabels.forEach(label => {
            labelAmounts[label] = orders.filter(o => o.shorLabel === label).reduce((sum, o) => sum + o.totalPrice, 0);
        });
            
            
            const safeOrderAmount = totalAmount || 0;
        const safePaidAmount = totalPaidAmount || 0;
        const safeRemainingAmount = remainingAmount || 0;


            const batches = {};
            orders.forEach(order => {
                if (!batches[order.orderBatchId]) {
                    batches[order.orderBatchId] = [];
                }
                batches[order.orderBatchId].push(order);
            });

            let html = `
                <!-- Masa Özeti -->
                <div class="row mb-4">
                    <div class="col-md-4">
                        <div class="card bg-warning bg-opacity-10 border-warning">
                            <div class="card-body text-center">
                                <i class="fas fa-clock fa-2x text-warning mb-2"></i>
                                <h6 class="text-muted">Açılış Zamanı</h6>
                                <p class="fw-bold mb-0">${getTimeAgo(orders[0]?.createdAt)}</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card bg-info bg-opacity-10 border-info">
                            <div class="card-body text-center">
                                <i class="fas fa-shopping-cart fa-2x text-info mb-2"></i>
                                <h6 class="text-muted">Toplam Ürün</h6>
                                <p class="fw-bold mb-0">${orders.reduce((sum, order) => sum + order.productQuantity, 0)} adet</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card bg-success bg-opacity-10 border-success">
                            <div class="card-body text-center">
                                <i class="fas fa-lira-sign fa-2x text-success mb-2"></i>
                                <h6 class="text-muted">Toplam Tutar</h6>
                                <p class="fw-bold mb-0">₺${totalAmount.toFixed(2)}</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Sipariş Geçmişi - Batch Bazlı -->
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">
                            <i class="fas fa-list me-2"></i>Sipariş Geçmişi
                        </h6>
                        <button class="btn btn-sm btn-outline-primary" onclick="addNewOrder('${table.id}')">
                            <i class="fas fa-plus me-1"></i>Ürün Ekle
                        </button>
                    </div>
                    <div class="card-body">
            `;

            // Her batch için ayrı grup göster
            Object.keys(batches).forEach((batchId, index) => {
                const batchOrders = batches[batchId];
                const batchTime = new Date(batchOrders[0].createdAt).toLocaleString('tr-TR');
                const batchTotal = batchOrders.reduce((sum, o) => sum + o.totalPrice, 0);

                html += `
                    <div class="border rounded mb-3 p-3 ${index % 2 === 0 ? 'bg-light' : ''}">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="text-primary mb-0">
                                <i class="fas fa-clock me-1"></i>
                                ${batchTime} - ${batchOrders[0].personFullName}
                            </h6>
                            <span class="badge bg-success">₺${batchTotal.toFixed(2)}</span>
                        </div>

                        <div class="table-responsive">
                            <table class="table table-sm table-borderless mb-0" style="table-layout: fixed;">
                                <colgroup>
                                    <col style="width: 45%;">  <!-- Ürün adı -->
                                    <col style="width: 15%;">  <!-- Adet -->
                                    <col style="width: 20%;">  <!-- Birim fiyat -->
                                    <col style="width: 20%;">  <!-- Toplam -->
                                </colgroup>
                `;

                batchOrders.forEach(order => {
                    html += `
                        <tr>
                            <td style="word-wrap: break-word;">${order.productName}</td>
                            <td class="text-center"><span class="badge bg-primary">${order.productQuantity}</span></td>
                            <td class="text-end">₺${order.productPrice.toFixed(2)}</td>
                            <td class="text-end fw-bold">₺${order.totalPrice.toFixed(2)}</td>
                        </tr>
                    `;
                });

                html += `
                            </table>
                        </div>
                    </div>
                `;
            });

            html += `
                    </div>
                </div>

                <!-- Ödeme Butonları -->
                <div class="row g-2">
                    <div class="col-md-4">
                        <button class="btn btn-success w-100" onclick="processPayment('${table.id}', 'cash', ${totalAmount})">
                            <i class="fas fa-money-bill-wave me-2"></i>Nakit Ödeme
                        </button>
                    </div>
                    <div class="col-md-4">
                        <button class="btn btn-primary w-100" onclick="processPayment('${table.id}', 'card', ${totalAmount})">
                            <i class="fas fa-credit-card me-2"></i>Kart Ödeme
                        </button>
                    </div>
                    <div class="col-md-4">
                        <button class="btn btn-outline-danger w-100" onclick="closeTableAccount('${table.id}')">
                            <i class="fas fa-times me-2"></i>Hesap Kapat
                        </button>
                    </div>
                </div>
            `;


        // Ödeme Butonları bölümünü bu şekilde güncelle:
        html += `
            <!-- Hızlı Ödeme Butonları -->
            <div class="card mb-3">
                <div class="card-header">
                    <h6 class="mb-0"><i class="fas fa-credit-card me-2"></i>Hızlı Ödeme</h6>
                </div>
                <div class="card-body">
                    <div class="row g-2 mb-3">
                        <div class="col-md-3">
                            <button class="btn btn-success w-100" onclick="processQuickPayment('${table.id}', 'full', 'cash')">
                                <i class="fas fa-money-bill-wave me-1"></i>
                                <div class="small">Tümü - Nakit</div>
                                <strong>₺${safeOrderAmount.toFixed(2)}</strong>
                            </button>
                        </div>
                        <div class="col-md-3">
                            <button class="btn btn-primary w-100" onclick="processQuickPayment('${table.id}', 'full', 'card')">
                                <i class="fas fa-credit-card me-1"></i>
                                <div class="small">Tümü - Kart</div>
                                <strong>₺${safeOrderAmount.toFixed(2)}</strong>
                            </button>
                        </div>
                        <div class="col-md-3">
                            <button class="btn btn-warning w-100" onclick="processQuickPayment('${table.id}', 'half', 'cash')">
                                <i class="fas fa-percentage me-1"></i>
                                <div class="small">Yarım - Nakit</div>
                                <strong>₺${(safeOrderAmount/2).toFixed(2)}</strong>
                            </button>
                        </div>
                        <div class="col-md-3">
                            <button class="btn btn-info w-100" onclick="processQuickPayment('${table.id}', 'tip15', 'card')">
                                <i class="fas fa-heart me-1"></i>
                                <div class="small">+%15 Bahşiş</div>
                                <strong>₺${(safeOrderAmount*1.15).toFixed(2)}</strong>
                            </button>
                        </div>
                    </div>

                    <!-- İkinci Sıra -->
                    <div class="row g-2">
                        <div class="col-md-4">
                            <button class="btn btn-outline-success w-100" onclick="processQuickPayment('${table.id}', 'tip10', 'cash')">
                                <i class="fas fa-plus me-1"></i>+%10 Bahşiş (₺${(safeOrderAmount*1.10).toFixed(2)})
                            </button>
                        </div>
                        <div class="col-md-4">
                            <button class="btn btn-outline-info w-100" onclick="processQuickPayment('${table.id}', 'tip20', 'card')">
                                <i class="fas fa-star me-1"></i>+%20 Bahşiş (₺${(safeOrderAmount*1.20).toFixed(2)})
                            </button>
                        </div>
                        <div class="col-md-4">
                            <button class="btn btn-outline-secondary w-100" onclick="showCustomPaymentModal('${table.id}', ${safeOrderAmount})">
                                <i class="fas fa-calculator me-1"></i>Özel Tutar
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;


            return html;
        }


                // Hızlı ödeme işlemi
        function processQuickPayment(tableId, paymentMode, paymentType, paymentLabel = '') {
            const paymentData = {
                tableId: tableId,
                paymentMode: paymentMode,
                paymentType: paymentType === 'cash' ? 0 : 1, // Cash = 0, Card = 1
                paymentLabel: paymentLabel,
                customAmount: 0
            };

            // Konfirmasyon mesajı
            let confirmMessage = `${paymentType === 'cash' ? 'Nakit' : 'Kart'} ile `;
            switch(paymentMode) {
                case 'full': confirmMessage += 'tüm hesabı ödemek'; break;
                case 'half': confirmMessage += 'yarım ödeme almak'; break;
                case 'tip15': confirmMessage += '%15 bahşişle ödeme almak'; break;
                case 'tip10': confirmMessage += '%10 bahşişle ödeme almak'; break;
                case 'tip20': confirmMessage += '%20 bahşişle ödeme almak'; break;
                case 'label': confirmMessage += `"${paymentLabel}" etiketli ürünleri ödemek`; break;
            }

            if (!confirm(`${confirmMessage} istediğinizden emin misiniz?`)) {
                return;
            }

            LoaderHelper.show('Ödeme işleniyor...');

            $.ajax({
                url: '/Home/ProcessQuickPayment',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(paymentData),
                success: function(response) {
                    LoaderHelper.hide();

                    if (response.success) {
                        ToastHelper.success(response.message);

                        if (response.data.accountClosed) {
                            // Hesap kapatıldıysa modal'ı kapat ve masa listesini güncelle
                            $('#tableModal').modal('hide');
                            loadTables();
                        } else {
                            // Parçalı ödeme - masa detayını yenile
                            const tableId = $('#modalTableName').data('table-id') || tableId;
                            loadTableDetails(tableId);
                        }
                    } else {
                        ToastHelper.error(response.message);
                    }
                },
                error: function() {
                    LoaderHelper.hide();
                    ToastHelper.error('Ödeme işlenemedi! Bağlantı hatası.');
                }
            });
        }

        // Özel tutar modal'ı (2. aşamada yapacağız)
        function showCustomPaymentModal(tableId, totalAmount) {
            ToastHelper.info('Özel tutar özelliği 2. aşamada eklenecek!');
        }

        // Seçmeli ödeme modal'ı (2. aşamada yapacağız)
        function openSelectivePayment(tableId) {
            ToastHelper.info('Seçmeli ödeme özelliği 2. aşamada eklenecek!');
        }




        function startNewOrder(tableId) {
            const tableName = $('#modalTableName').text();

              // BURADA currentTableId'yi set et!
             currentTableId = tableId; // ← Bu satır eksikti!

            // Masa modal'ını kapat
            $('#tableModal').modal('hide');

            // Direkt ürün seçim modal'ını aç
            openProductSelectionModal(tableId, tableName);
        }

        function closeTableAccount(tableId) {
            if (!confirm('Bu hesabı kapatmak istediğinizden emin misiniz?\n\n⚠️ DİKKAT: Ödeme alınmadan hesap kapatılacak!')) {
                return;
            }

            LoaderHelper.show('Hesap kapatılıyor...');

            $.ajax({
                url: '/Home/CloseTableAccount',
                method: 'POST',
                data: { tableId: tableId },
                success: function(response) {
                    LoaderHelper.hide();

                    if (response.success) {
                        ToastHelper.success(response.message);
                        $('#tableModal').modal('hide');
                        loadTables(); // Masa listesini güncelle
                    } else {
                        ToastHelper.error(response.message);
                    }
                },
                error: function() {
                    LoaderHelper.hide();
                    ToastHelper.error('Bağlantı hatası!');
                }
            });
        }

        function addNewOrder(tableId) {
            const tableName = $('#modalTableName').text();

            // Masa modal'ını kapat
            $('#tableModal').modal('hide');

            // Ürün seçim modal'ını aç
            openProductSelectionModal(tableId, tableName);
        }

        function processPayment(tableId, paymentType, amount) {
            console.log('Ödeme işleniyor:', tableId, paymentType, amount);
            ToastHelper.info(`${paymentType === 'cash' ? 'Nakit' : 'Kart'} ödeme özelliği yakında eklenecek!`);
        }

        function partialPayment(tableId, totalAmount) {
            console.log('Parçalı ödeme:', tableId, totalAmount);
            ToastHelper.info('Parçalı ödeme özelliği yakında eklenecek!');
        }

        function generateOrdersTabContent(table, orders) {
            return generateOccupiedTableHTML(table, orders, 0); // Mevcut fonksiyonunu kullan
        }

                // Ödeme formu gösterme fonksiyonu
        function showPaymentForm(tableId) {
            ToastHelper.info('Ödeme formu özelliği yakında eklenecek!');
        }

        function generatePaymentsTabContent(payments, tableId) {
            if (payments.length === 0) {
                return `
                    <div class="text-center py-4">
                        <i class="fas fa-credit-card fa-3x text-muted mb-3"></i>
                        <p class="text-muted">Henüz ödeme yapılmamış</p>
                        <button class="btn btn-primary" onclick="showPaymentForm('${tableId}')">
                            <i class="fas fa-plus me-2"></i>Ödeme Al
                        </button>
                    </div>
                `;
            }

            // Ödeme geçmişi listesi
            let html = '<div class="list-group">';
            payments.forEach(payment => {
                const paymentType = payment.PaymentType === 0 ? 'Nakit' : 'Kart';
                const date = new Date(payment.CreatedAt).toLocaleString('tr-TR');

                html += `
                    <div class="list-group-item">
                        <div class="d-flex justify-content-between">
                            <div>
                                <strong>${paymentType}</strong>
                                <small class="text-muted d-block">${date}</small>
                                ${payment.ShortLabel ? `<small class="text-info">${payment.ShortLabel}</small>` : ''}
                            </div>
                            <div class="text-success fw-bold">₺${payment.Amount.toFixed(2)}</div>
                        </div>
                    </div>
                `;
            });
            html += '</div>';

            return html;
        }

        function generateSummaryTabContent(totalAmount, totalPaidAmount, remainingAmount) {
            return `
                <div class="row">
                    <div class="col-md-4">
                        <div class="card bg-info bg-opacity-10">
                            <div class="card-body text-center">
                                <i class="fas fa-receipt fa-2x text-info mb-2"></i>
                                <h6>Toplam Sipariş</h6>
                                <h4 class="text-info">₺${totalAmount.toFixed(2)}</h4>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card bg-success bg-opacity-10">
                            <div class="card-body text-center">
                                <i class="fas fa-check fa-2x text-success mb-2"></i>
                                <h6>Ödenen</h6>
                                <h4 class="text-success">₺${totalPaidAmount.toFixed(2)}</h4>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card ${remainingAmount > 0 ? 'bg-warning bg-opacity-10' : 'bg-success bg-opacity-10'}">
                            <div class="card-body text-center">
                                <i class="fas fa-balance-scale fa-2x ${remainingAmount > 0 ? 'text-warning' : 'text-success'} mb-2"></i>
                                <h6>Kalan</h6>
                                <h4 class="${remainingAmount > 0 ? 'text-warning' : 'text-success'}">₺${remainingAmount.toFixed(2)}</h4>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }


        // ============= ÜRÜN SEÇİM MODALİ SİSTEMİ =============

        let currentProducts = []; // Tüm ürünler
        let cartItems = []; // Sepet
        let currentTableId = null; // Hangi masa

        // Modal açma fonksiyonunu güncelle
        function openProductSelectionModal(tableId, tableName) {
           
            currentTableId = tableId;

            // Modal başlığını ayarla
            $('#productModalTableName').text(`${tableName} - Sipariş Al`);

            // Modal'ı aç
            const modal = new bootstrap.Modal(document.getElementById('productSelectionModal'));
            modal.show();

            // Sepeti temizle
            clearCart();

            // Ürünleri yükle
            loadProducts();
        }

        // Ürünleri API'den yükle
        function loadProducts() {
            $.ajax({
                url: '/Home/GetProducts',
                method: 'GET',
                success: function(response) {
                    if (response.success) {
                        currentProducts = response.data.allProducts;
                        renderProductTabs(response.data.categories);
                        renderProducts(currentProducts, 'allProductsGrid');
                    } else {
                        showError('Ürünler yüklenemedi: ' + response.message);
                    }
                },
                error: function() {
                    showError('Bağlantı hatası! Ürünler yüklenemedi.');
                }
            });
        }

        // Kategori tab'larını dinamik oluştur
        function renderProductTabs(categories) {
            const tabsContainer = $('#productCategoryTabs');
            const contentContainer = $('#productTabContent');

            // Tümü tab'ı hariç diğerlerini temizle
            tabsContainer.find('li:not(:first)').remove();
            contentContainer.find('.tab-pane:not(:first)').remove();

            // Her kategori için tab ekle
            categories.forEach((category, index) => {
                const categoryId = category.name.replace(/\s+/g, '').toLowerCase();
                const tabId = `${categoryId}-tab`;
                const contentId = `${categoryId}-products`;

                // Tab button
                const tabHtml = `
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="${tabId}" data-bs-toggle="pill"
                                data-bs-target="#${contentId}" type="button" role="tab">
                            <i class="fas fa-tag me-2"></i>${category.name}
                            <span class="badge bg-secondary ms-2">${category.count}</span>
                        </button>
                    </li>
                `;
                tabsContainer.append(tabHtml);

                // Tab content
                const contentHtml = `
                    <div class="tab-pane fade" id="${contentId}">
                        <div id="${categoryId}ProductsGrid" class="row g-3">
                            <!-- Ürünler buraya gelecek -->
                        </div>
                    </div>
                `;
                contentContainer.append(contentHtml);

                // Tab tıklama event'i
                $(`#${tabId}`).on('click', function() {
                    renderProducts(category.products, `${categoryId}ProductsGrid`);
                });
            });
        }

        // Ürünleri grid'de göster
        function renderProducts(products, containerId) {
            const container = $(`#${containerId}`);

            if (products.length === 0) {
                container.html(`
                    <div class="col-12 text-center py-5">
                        <i class="fas fa-search fa-3x text-muted mb-3 opacity-25"></i>
                        <h6 class="text-muted">Ürün bulunamadı</h6>
                    </div>
                `);
                return;
            }

            let html = '';
            products.forEach(product => {
                html += `
                    <div class="col-lg-4 col-md-6">
                        <div class="card h-100 shadow-sm product-card" data-product-id="${product.id}">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-start mb-2">
                                    <h6 class="card-title mb-0 fw-bold">${product.name}</h6>
                                    ${product.hasCampaign ? `<span class="badge bg-warning text-dark">${product.campaignCaption}</span>` : ''}
                                </div>

                                ${product.description ? `<p class="card-text small text-muted mb-2">${product.description}</p>` : ''}

                                <div class="d-flex justify-content-between align-items-center">
                                    <span class="h6 text-success mb-0">₺${product.price.toFixed(2)}</span>
                                    <button class="btn btn-primary btn-sm" onclick="addToCart('${product.id}')">
                                        <i class="fas fa-plus me-1"></i>Ekle
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });

            container.html(html);
        }

        // Ürün arama
        $('#productSearch').on('input', function() {
            const searchTerm = $(this).val().toLowerCase();
            const filtered = currentProducts.filter(p =>
                p.name.toLowerCase().includes(searchTerm) ||
                (p.description && p.description.toLowerCase().includes(searchTerm))
            );

            // Aktif tab'ı bul ve o grid'i güncelle
            const activeTab = $('.nav-pills .nav-link.active').attr('id');
            if (activeTab === 'all-tab') {
                renderProducts(filtered, 'allProductsGrid');
            }
        });

        // Sepete ekle
        function addToCart(productId) {
            const product = currentProducts.find(p => p.id === productId);
            if (!product) return;

            const existingItem = cartItems.find(item => item.productId === productId);

            if (existingItem) {
                existingItem.quantity += 1;
                existingItem.totalPrice = existingItem.quantity * existingItem.price;
            } else {
                cartItems.push({
                    productId: productId,
                    name: product.name,
                    price: product.price,
                    quantity: 1,
                    totalPrice: product.price,
                    type: product.type // mutfak/bar için
                });
            }

            updateCartDisplay();

            // Visual feedback
            ToastHelper.success(`${product.name} sepete eklendi!`, 1500);
        }

        // Sepet görüntüsünü güncelle
        function updateCartDisplay() {
            const cartContainer = $('#cartItems');
            const emptyMessage = $('#emptyCartMessage');
            const cartSummary = $('#cartSummary');
            const cartCount = $('#cartItemCount');

            cartCount.text(cartItems.reduce((sum, item) => sum + item.quantity, 0));

            if (cartItems.length === 0) {
                emptyMessage.show();
                cartSummary.hide();
                return;
            }

            emptyMessage.hide();
            cartSummary.show();

            let html = '';
            let total = 0;

            cartItems.forEach(item => {
                total += item.totalPrice;
                html += `
                    <div class="card mb-2 cart-item">
                        <div class="card-body p-2">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="flex-grow-1">
                                    <h6 class="mb-0 small fw-bold">${item.name}</h6>
                                    <small class="text-muted">₺${item.price.toFixed(2)} x ${item.quantity}</small>
                                </div>
                                <div class="text-end">
                                    <div class="btn-group btn-group-sm">
                                        <button class="btn btn-outline-danger btn-sm" onclick="updateCartQuantity('${item.productId}', -1)">
                                            <i class="fas fa-minus"></i>
                                        </button>
                                        <span class="btn btn-outline-secondary btn-sm">${item.quantity}</span>
                                        <button class="btn btn-outline-success btn-sm" onclick="updateCartQuantity('${item.productId}', 1)">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                    </div>
                                    <div class="fw-bold small mt-1">₺${item.totalPrice.toFixed(2)}</div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });

            cartContainer.html(html);
            $('#cartTotal').text(`₺${total.toFixed(2)}`);
        }

        // Sepet miktarı güncelle
        function updateCartQuantity(productId, change) {
            const item = cartItems.find(item => item.productId === productId);
            if (!item) return;

            item.quantity += change;

            if (item.quantity <= 0) {
                cartItems = cartItems.filter(i => i.productId !== productId);
            } else {
                item.totalPrice = item.quantity * item.price;
            }

            updateCartDisplay();
        }

        // Sepeti temizle
        function clearCart() {
            cartItems = [];
            updateCartDisplay();
        }

        // Hata gösterme
        function showError(message) {
            $('#allProductsGrid').html(`
                <div class="col-12 text-center py-5">
                    <i class="fas fa-exclamation-triangle fa-3x text-danger mb-3"></i>
                    <h6 class="text-danger">${message}</h6>
                </div>
            `);
        }

        // ============= SİPARİŞ GÖNDERME SİSTEMİ =============

        // Sipariş gönder butonu event'i
        $('#submitOrderBtn').on('click', function() {
            if (cartItems.length === 0) {
                ToastHelper.warning('Sepette ürün bulunmuyor!');
                return;
            }

            if (!currentTableId) {
                ToastHelper.error('Masa bilgisi bulunamadı!');
                return;
            }

            submitOrder();
        });

        // Ana sipariş gönderme fonksiyonu
        function submitOrder() {
            const waiterNote = $('#waiterNote').val().trim();

                    console.log('Cart items:', cartItems); // DEBUG
        console.log('Current table ID:', currentTableId); // DEBUG

        if (cartItems.length === 0) {
            ToastHelper.warning('Sepette ürün bulunmuyor!');
            return;
        }

        if (!currentTableId) {
            ToastHelper.error('Masa bilgisi bulunamadı!');
            return;
        }
            // Sipariş verisini hazırla
        const orderData = {
               tableId: currentTableId,
               waiterNote: waiterNote || null,
               items: cartItems.map(item => ({
                   productId: item.productId,
                   productName: item.name,
                   price: item.price,
                   quantity: item.quantity
               }))
           };

            // Konfirmasyon dialog'u
            const totalAmount = cartItems.reduce((sum, item) => sum + item.totalPrice, 0);
            const itemCount = cartItems.reduce((sum, item) => sum + item.quantity, 0);

            const confirmMessage = `
        🛒 ${itemCount} ürün
        💰 Toplam: ₺${totalAmount.toFixed(2)}
        ${waiterNote ? `📝 Not: ${waiterNote}` : ''}

        Siparişi göndermek istediğinizden emin misiniz?
            `;

            if (!confirm(confirmMessage.trim())) {
                return;
            }

            // Loading göster
            const submitBtn = $('#submitOrderBtn');
            const originalText = submitBtn.html();
            submitBtn.html('<i class="fas fa-spinner fa-spin me-2"></i>Gönderiliyor...').prop('disabled', true);

            // AJAX request
            $.ajax({
                url: '/Home/SubmitOrder',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(orderData),
                success: function(response) {
                    submitBtn.html(originalText).prop('disabled', false);

                    if (response.success) {
                        // Başarılı sipariş
                        ToastHelper.success(response.message);

                        // Modal'ı kapat
                        $('#productSelectionModal').modal('hide');

                        // Masa listesini güncelle (dashboard'da durumları güncellensin)
                        loadTables();

                        // 1.5 saniye sonra masa detayını göster (yeni siparişle)
                        setTimeout(() => {
                            showTableWithNewOrder(currentTableId);
                        }, 1500);

                    } else {
                        ToastHelper.error('Sipariş gönderilemedi: ' + response.message);
                    }
                },
                error: function(xhr, status, error) {
                    submitBtn.html(originalText).prop('disabled', false);

                    console.error('Sipariş gönderme hatası:', error);
                    ToastHelper.error('Bağlantı hatası! Sipariş gönderilemedi.');
                }
            });
        }

        // Sipariş sonrası masa detayını göster
        function showTableWithNewOrder(tableId) {
            // Güncellenmiş masa listesinden masa adını bul
            const tableData = Object.values(currentTablesData).flat().find(t => t.id === tableId);
            if (tableData) {
                openTableModal(tableId, tableData.name, true); // true = dolu masa
            }
        }

        // Modal kapatma event'leri - sepeti temizle
        $('#productSelectionModal').on('hidden.bs.modal', function() {
            clearCart();
            currentTableId = null;
            $('#waiterNote').val('');
        });

        // Enter tuşu ile sipariş gönderme (waiterNote textarea'sında)
        $('#waiterNote').on('keypress', function(e) {
            if (e.which === 13 && e.ctrlKey) { // Ctrl+Enter
                e.preventDefault();
                if (cartItems.length > 0) {
                    submitOrder();
                }
            }
        });

        // Hızlı miktar değiştirme (+ - butonları için)
        function updateCartQuantity(productId, change) {
            const item = cartItems.find(item => item.productId === productId);
            if (!item) return;

            const oldQuantity = item.quantity;
            item.quantity += change;

            if (item.quantity <= 0) {
                // Ürünü sepetten çıkar
                cartItems = cartItems.filter(i => i.productId !== productId);
                const productName = item.name;
                ToastHelper.info(`${productName} sepetten çıkarıldı`, 1500);
            } else {
                item.totalPrice = item.quantity * item.price;

                // Visual feedback
                if (change > 0) {
                    ToastHelper.success(`${item.name} +${change}`, 1000);
                } else {
                    ToastHelper.warning(`${item.name} ${change}`, 1000);
                }
            }

            updateCartDisplay();
        }

        // Sepet temizleme fonksiyonu güncelleme
        function clearCart() {
            cartItems = [];
            updateCartDisplay();
        }

        // Keyboard shortcuts
        $(document).on('keydown', function(e) {
            // Modal açıkken çalışsın
            if ($('#productSelectionModal').hasClass('show')) {
                // Esc = Modal kapat
                if (e.key === 'Escape' && !e.ctrlKey && !e.altKey) {
                    $('#productSelectionModal').modal('hide');
                }

                // Ctrl+Enter = Sipariş gönder
                if (e.key === 'Enter' && e.ctrlKey && cartItems.length > 0) {
                    e.preventDefault();
                    submitOrder();
                }
            }
        });
    </script>
}

